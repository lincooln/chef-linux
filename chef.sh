#!/bin/bash
###############################################################################
# –ü–û–í–ê–† ‚Äî –£—Ç–∏–ª–∏—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Linux-—Å–∏—Å—Ç–µ–º
# –ì–∏–±—Ä–∏–¥–Ω–∞—è –≤–µ—Ä—Å–∏—è: –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ò —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
#
# –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–Ω–∏–≥: .inf
# –ê–≤—Ç–æ—Ä: Lincooln
# –í–µ—Ä—Å–∏—è: 4.2 - –£–º–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π + –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏–Ω–Ω–µ—Ä
# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/lincooln/chef-linux
###############################################################################
# =============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ò –ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï
# =============================================================================
DEBUG=1
VERBOSE=1
PROGRAM_NAME="–ü–æ–≤–∞—Ä"
SELF_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VERSION="4.2"
# –ü—É—Ç–∏ –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ (.inf)
RECIPE_PATHS=(
    "$SELF_PATH/—Ä–µ—Ü–µ–ø—Ç—ã"
    "$SELF_PATH/–∫–Ω–∏–≥–∏_—Ä–µ—Ü–µ–ø—Ç–æ–≤"
    "$SELF_PATH"
)
EDITOR=""
# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'
# =============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–ê–ö–ï–¢–ù–´–• –ú–ï–ù–ï–î–ñ–ï–†–û–í - –ü–†–û–°–¢–ê–Ø –î–õ–Ø –†–ê–°–®–ò–†–ï–ù–ò–Ø
# =============================================================================
declare -A DISTRO_MAPPING=(
    ["debian"]="apt"
    ["ubuntu"]="apt"
    ["linuxmint"]="apt"
    ["proxmox"]="apt"
    ["astra"]="apt"
    ["kali"]="apt"
    ["alt"]="alt"
    ["altlinux"]="alt"
    ["simply"]="apt"
    ["redos"]="dnf"
    ["fedora"]="dnf"
    ["rhel"]="dnf"
    ["centos"]="dnf"
    ["arch"]="pacman"
    ["manjaro"]="pacman"
    ["endeavouros"]="pacman"
    ["opensuse"]="zypper"
    ["suse"]="zypper"
)
declare -A PROVIDER_CONFIGS=(
    ["apt:pkgmgr"]="apt-get"
    ["apt:install"]="install -y"
    ["apt:remove"]="remove -y --purge"
    ["apt:name"]="APT-based (Debian/Ubuntu)"
    ["alt:pkgmgr"]="apt-get"
    ["alt:install"]="install -y"
    ["alt:remove"]="remove -y --purge"
    ["alt:name"]="ALT Linux"
    ["dnf:pkgmgr"]="dnf"
    ["dnf:install"]="install -y"
    ["dnf:remove"]="remove -y"
    ["dnf:name"]="DNF-based (Fedora/RedHat)"
    ["pacman:pkgmgr"]="pacman"
    ["pacman:install"]="-S --noconfirm"
    ["pacman:remove"]="-Rns --noconfirm"
    ["pacman:name"]="Pacman-based (Arch)"
    ["zypper:pkgmgr"]="zypper"
    ["zypper:install"]="install -y"
    ["zypper:remove"]="remove -y"
    ["zypper:name"]="Zypper-based (openSUSE)"
)
# =============================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•
# =============================================================================
declare -A DISTRO_PROVIDERS
declare -A RECIPE_NAME RECIPE_INGREDIENTS RECIPE_CLEANUPS RECIPE_SPICES
declare -gA FOUND_RECIPES PARSED_RECIPE
CLIENT=""
RECIPE_FILE=""
SELECTED=""
CURRENT_PROVIDER_TYPE=""
# =============================================================================
# –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø
# =============================================================================
log_debug()    { [[ $DEBUG -eq 1 ]] && echo -e "${MAGENTA}[–û–¢–õ–ê–î–ö–ê]${NC} $1" >&2; }
log_info()     { echo -e "${BLUE}[–ò–ù–§–û]${NC} $1"; }
log_detail()   { [[ $VERBOSE -eq 1 ]] && echo -e "${CYAN}[–î–ï–¢–ê–õ–ò]${NC} $1"; }
log_warn()     { echo -e "${YELLOW}[–í–ù–ò–ú–ê–ù–ò–ï]${NC} $1"; }
log_error()    { echo -e "${RED}[–û–®–ò–ë–ö–ê]${NC} $1" >&2; }
log_success()  { echo -e "${GREEN}[–£–°–ü–ï–•]${NC} $1"; }
log_step()     { echo -e "${GREEN}‚ûú${NC} $1"; }
friendly_message() {
    local type="$1" message="$2" hint="$3"
    case "$type" in
        "welcome") echo -e "${GREEN} –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨  –ü–û–í–ê–† v$VERSION ${NC}";;
        "help")    echo -e "${CYAN}üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:${NC} $message"; [[ -n "$hint" ]] && echo -e "${CYAN}   ü†ñ ${hint}${NC}";;
        "tip")     echo -e "${YELLOW}üí° –°–æ–≤–µ—Ç:${NC} $message";;
        "developer") echo -e "${MAGENTA}üë®‚Äçüíª –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:${NC} $message"; [[ -n "$hint" ]] && echo -e "${MAGENTA}   ü†ñ ${hint}${NC}";;
    esac
}
# =============================================================================
# –£–ü–†–û–©–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–†–û–í–ê–ô–î–ï–†–û–í
# =============================================================================
init_providers() {
    log_debug "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤..."
### ALT Linux provider functions
    provider_alt_check_install() {
        apt-cache show "$1" &>/dev/null || { log_warn "–ü–∞–∫–µ—Ç '$1' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö"; return 1; }
        return 0
    }
    provider_alt_check_remove()  {
        rpm -q "$1" &>/dev/null || { log_warn "–ü–∞–∫–µ—Ç '$1' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; return 1; }
        return 0
    }
    provider_alt_deps_install()  {
        apt-cache depends --with-recommends "$1" 2>/dev/null | grep -E "^[[:space:]]*Depends" | cut -d: -f2- | sed 's/^[[:space:]]*//' | sort -u
    }
    provider_alt_deps_remove()   {
        apt-cache rdepends "$1" 2>/dev/null | tail -n +3 | grep -v "^[[:space:]]" | sort -u
    }
### APT provider functions
    provider_apt_check_install() {
        apt-cache show "$1" &>/dev/null || { log_warn "–ü–∞–∫–µ—Ç '$1' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö"; return 1; }
        return 0
    }
    provider_apt_check_remove()  {
        dpkg -l "$1" &>/dev/null || { log_warn "–ü–∞–∫–µ—Ç '$1' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; return 1; }
        return 0
    }
    provider_apt_deps_install()  {
        apt-cache depends "$1" 2>/dev/null | grep -E "^[[:space:]]*Depends" | cut -d: -f2- | sed 's/^[[:space:]]*//' | sort -u
    }
    provider_apt_deps_remove()   {
        apt-cache rdepends "$1" 2>/dev/null | tail -n +3 | grep -v "^ " | sort -u
    }
### DNF provider functions
    provider_dnf_check_install() {
        dnf list available "$1" &>/dev/null || { log_warn "–ü–∞–∫–µ—Ç '$1' –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö"; return 1; }
        return 0
    }
    provider_dnf_check_remove()  {
        rpm -q "$1" &>/dev/null || { log_warn "–ü–∞–∫–µ—Ç '$1' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; return 1; }
        return 0
    }
    provider_dnf_deps_install()  {
        dnf deplist "$1" 2>/dev/null | grep "dependency" | awk '{print $2}' | sort -u
    }
    provider_dnf_deps_remove()   {
        dnf repoquery --whatrequires "$1" 2>/dev/null | head -n 20
    }
### Pacman provider functions
    provider_pacman_check_install() {
        pacman -Si "$1" &>/dev/null || { log_warn "–ü–∞–∫–µ—Ç '$1' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö"; return 1; }
        return 0
    }
    provider_pacman_check_remove()  {
        pacman -Q "$1" &>/dev/null || { log_warn "–ü–∞–∫–µ—Ç '$1' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; return 1; }
        return 0
    }
    provider_pacman_deps_install()  {
        pacman -Si "$1" 2>/dev/null | grep "Depends On" | cut -d: -f2 | sed 's/^ //'
    }
    provider_pacman_deps_remove()   {
        pacman -Qi "$1" 2>/dev/null | grep -A5 "Required By" | tail -n +2
    }
### Zypper provider functions
    provider_zypper_check_install() {
        zypper search "$1" &>/dev/null || { log_warn "–ü–∞–∫–µ—Ç '$1' –Ω–µ –Ω–∞–π–¥–µ–Ω"; return 1; }
        return 0
    }
    provider_zypper_check_remove()  {
        rpm -q "$1" &>/dev/null || { log_warn "–ü–∞–∫–µ—Ç '$1' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; return 1; }
        return 0
    }
    provider_zypper_deps_install()  {
        zypper info "$1" 2>/dev/null | grep "Requires" | cut -d: -f2-
    }
    provider_zypper_deps_remove()   {
        zypper what-requires "$1" 2>/dev/null | grep -v "Reading" | head -n 10
    }
}
register_providers() {
    log_debug "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–æ–≤..."
    for distro in "${!DISTRO_MAPPING[@]}"; do
        local provider_type="${DISTRO_MAPPING[$distro]}"
        if [[ -z "${PROVIDER_CONFIGS[$provider_type:pkgmgr]}" ]]; then
            log_warn "–¢–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ '$provider_type' –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞ '$distro'"
            continue
        fi
        for key in "${!PROVIDER_CONFIGS[@]}"; do
            if [[ "$key" == "$provider_type:"* ]]; then
                local field="${key#$provider_type:}"
                DISTRO_PROVIDERS["$distro:$field"]="${PROVIDER_CONFIGS[$key]}"
            fi
        done
        DISTRO_PROVIDERS["$distro:check_install"]="provider_${provider_type}_check_install"
        DISTRO_PROVIDERS["$distro:check_remove"]="provider_${provider_type}_check_remove"
        DISTRO_PROVIDERS["$distro:deps_install"]="provider_${provider_type}_deps_install"
        DISTRO_PROVIDERS["$distro:deps_remove"]="provider_${provider_type}_deps_remove"
        log_debug "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: $distro ‚Üí $provider_type"
    done
}
detect_provider() {
    log_step "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞..."
    if [[ -n "${DISTRO_MAPPING[$CLIENT]}" ]]; then
        CURRENT_PROVIDER_TYPE="${DISTRO_MAPPING[$CLIENT]}"
        local provider_name="${PROVIDER_CONFIGS[$CURRENT_PROVIDER_TYPE:name]}"
        log_success "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: $provider_name"
        return 0
    else
        log_error "–î–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ '$CLIENT' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
        show_distro_help
        return 1
    fi
}
show_distro_help() {
    echo; friendly_message "developer" "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–æ–≤–æ–≥–æ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞" "–≠—Ç–æ –∑–∞–π–º–µ—Ç 2 –º–∏–Ω—É—Ç—ã!"; echo
    echo -e "${CYAN}–®–ê–ì 1:${NC} –î–æ–±–∞–≤—å—Ç–µ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ –≤ –º–∞–ø–ø–∏–Ω–≥"
    echo "  –í —Ñ–∞–π–ª–µ: ${BASH_SOURCE[0]}"
    echo "  –ù–∞–π–¥–∏—Ç–µ: declare -A DISTRO_MAPPING"
    echo "  –î–æ–±–∞–≤—å—Ç–µ: [\"–≤–∞—à-–¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤\"]=\"—Ç–∏–ø-–ø–∞–∫–µ—Ç–Ω–æ–≥–æ-–º–µ–Ω–µ–¥–∂–µ—Ä–∞\""
    echo
    echo -e "${CYAN}–®–ê–ì 2:${NC} –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:"
    echo -e "  ${YELLOW}apt${NC}    - Debian, Ubuntu"
    echo -e "  ${YELLOW}alt${NC}    - ALT Linux"
    echo -e "  ${YELLOW}dnf${NC}    - Fedora, RedOS"
    echo -e "  ${YELLOW}pacman${NC} - Arch, Manjaro"
    echo -e "  ${YELLOW}zypper${NC} - openSUSE"
    echo -e "${CYAN}–ü–†–ò–ú–ï–†:${NC} [\"simply\"]=\"apt\""
    echo
    echo -e "${CYAN}–°–£–©–ï–°–¢–í–£–Æ–©–ò–ï:${NC}"
    for distro in "${!DISTRO_MAPPING[@]}"; do echo "  ‚Ä¢ $distro ‚Üí ${DISTRO_MAPPING[$distro]}"; done
    echo
}
get_provider_field() {
    local distro="$1" field="$2"
    local value="${DISTRO_PROVIDERS[$distro:$field]}"
    if [[ -z "$value" ]]; then
        log_debug "–ü–æ–ª–µ '$field' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è '$distro'"
        if [[ $DEBUG -eq 1 ]]; then
            friendly_message "developer" "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '$field' –¥–ª—è '$distro'" "–î–æ–±–∞–≤—å—Ç–µ –≤ PROVIDER_CONFIGS: [\"$CURRENT_PROVIDER_TYPE:$field\"]=\"–∑–Ω–∞—á–µ–Ω–∏–µ\""
        fi
    fi
    echo "$value"
}
call_provider_func() {
    local distro="$1" func_type="$2" pkg="$3"
    local func_name="$(get_provider_field "$distro" "$func_type")"
    if [[ -n "$func_name" ]] && declare -f "$func_name" >/dev/null; then
        "$func_name" "$pkg"
        return $?
    else
        log_debug "–§—É–Ω–∫—Ü–∏—è '$func_name' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        if [[ $DEBUG -eq 1 ]]; then
            friendly_message "developer" "–§—É–Ω–∫—Ü–∏—è '$func_type' –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞" "–î–æ–±–∞–≤—å—Ç–µ: provider_${CURRENT_PROVIDER_TYPE}_${func_type}() { ... }"
        fi
        return 1
    fi
}
# =============================================================================
# –£–õ–£–ß–®–ï–ù–ù–´–ô –°–ü–ò–ù–ù–ï–†
# =============================================================================
can_use_unicode_spinner() {
    if ! command -v tput >/dev/null; then return 1; fi
    if [[ "$LANG" != *"UTF-8"* && "$LANG" != *"utf-8"* ]]; then return 1; fi
    if [[ ! -t 1 ]]; then return 1; fi
    return 0
}
show_advanced_spinner() {
    local pid=$1 message="$2" delay=0.15
    if can_use_unicode_spinner; then
        local spin=('‚†ã' '‚†ô' '‚†π' '‚†∏' '‚†º' '‚†¥' '‚†¶' '‚†ß' '‚†á' '‚†è') i=0
        tput civis 2>/dev/null
        while kill -0 $pid 2>/dev/null; do
            printf "\r[%s] %s" "${spin[i]}" "$message" >&2
            ((i = (i + 1) % ${#spin[@]}))
            sleep $delay
        done
        tput cnorm 2>/dev/null
        printf "\r‚úÖ %s –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n" "$message" >&2
    else
        local spinstr='|/-\' temp
        while kill -0 $pid 2>/dev/null; do
            temp=${spinstr#?}
            printf "\r[%c] %s" "$spinstr" "$message" >&2
            spinstr=$temp${spinstr%"$temp"}
            sleep $delay
        done
        printf "\r‚úì %s –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n" "$message" >&2
    fi
}
# =============================================================================
# –ê–ù–ê–õ–ò–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô ‚Äî –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
# =============================================================================
analyze_dependencies() {
    local ingredients="$1" cleanups="$2"
    log_step "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Ä–µ—Ü–µ–ø—Ç–∞..."
    echo
    local tmp_out="/tmp/chef_deps_$$"
    > "$tmp_out"  # –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª

    local analysis_errors=()

    # --- –ê–Ω–∞–ª–∏–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ---
    if [[ -n "$ingredients" ]]; then
        for pkg in $ingredients; do
            [[ -z "$pkg" ]] && continue

            (
                # –í–°–Å –≤–Ω—É—Ç—Ä–∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
                if ! call_provider_func "$CLIENT" "check_install" "$pkg" 2>/dev/null; then
                    echo "ERROR:unavailable:$pkg" >> "$tmp_out"
                    exit 0
                fi
                deps=$(call_provider_func "$CLIENT" "deps_install" "$pkg" 2>/dev/null)
                if [[ -n "$deps" ]]; then
                    for dep in $deps; do
                        if [[ ! " $ingredients " == *" $dep "* ]]; then
                            echo "INSTALL_DEP:$dep" >> "$tmp_out"
                        fi
                    done
                fi
            ) &
            local pid=$!
            show_advanced_spinner $pid "–ê–Ω–∞–ª–∏–∑ $pkg"
            wait $pid
        done
    fi

    # --- –ê–Ω–∞–ª–∏–∑ —É–¥–∞–ª–µ–Ω–∏—è ---
    if [[ -n "$cleanups" ]]; then
        for pkg in $cleanups; do
            [[ -z "$pkg" ]] && continue
            (
                if ! call_provider_func "$CLIENT" "check_remove" "$pkg" 2>/dev/null; then
                    echo "ERROR:not_installed:$pkg" >> "$tmp_out"
                    exit 0
                fi
                deps=$(call_provider_func "$CLIENT" "deps_remove" "$pkg" 2>/dev/null)
                if [[ -n "$deps" ]]; then
                    for dep in $deps; do
                        if [[ ! " $cleanups " == *" $dep "* ]]; then
                            echo "REMOVE_DEP:$dep" >> "$tmp_out"
                        fi
                    done
                fi
            ) &
            local pid=$!
            show_advanced_spinner $pid "–ê–Ω–∞–ª–∏–∑ —É–¥–∞–ª–µ–Ω–∏—è $pkg"
            wait $pid
        done
    fi

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
    local missing_install_deps=() additional_remove_deps=()

    while IFS= read -r line; do
        case "$line" in
            ERROR:unavailable:*)
                analysis_errors+=("–ü–∞–∫–µ—Ç '${line#ERROR:unavailable:}' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö")
                ;;
            INSTALL_DEP:*)
                missing_install_deps+=("${line#INSTALL_DEP:}")
                ;;
            REMOVE_DEP:*)
                additional_remove_deps+=("${line#REMOVE_DEP:}")
                ;;
        esac
    done < "$tmp_out"
    rm -f "$tmp_out"

    # --- –í—ã–≤–æ–¥ ---
    echo
    local has_warnings=0
    if [[ ${#analysis_errors[@]} -gt 0 ]]; then
        log_warn "–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é –ø–∞–∫–µ—Ç–æ–≤:"
        for err in "${analysis_errors[@]}"; do echo "  ‚Ä¢ $err"; done
        has_warnings=1
    fi
    if [[ ${#missing_install_deps[@]} -gt 0 ]]; then
        log_warn "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:"
        for dep in $(printf '%s\n' "${missing_install_deps[@]}" | sort -u); do
            echo "  ‚Ä¢ $dep"
        done
        has_warnings=1
    fi
    if [[ ${#additional_remove_deps[@]} -gt 0 ]]; then
        log_warn "–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã –ø–∞–∫–µ—Ç—ã, –∑–∞–≤–∏—Å—è—â–∏–µ –æ—Ç —É–¥–∞–ª—è–µ–º—ã—Ö:"
        for dep in $(printf '%s\n' "${additional_remove_deps[@]}" | sort -u); do
            echo "  ‚Ä¢ $dep"
        done
        has_warnings=1
    fi
    if [[ $has_warnings -eq 0 ]]; then
        log_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—á—Ç–µ–Ω—ã –≤ —Ä–µ—Ü–µ–ø—Ç–µ"
    else
        friendly_message "tip" "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –æ–∂–∏–¥–∞–ª–∏ –ª–∏ –≤—ã —ç—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
        echo
    fi
    return $has_warnings
}
# =============================================================================
# –†–ê–ë–û–¢–ê –° –ü–ê–ö–ï–¢–ê–ú–ò
# =============================================================================
run_with_privileges() {
    if [[ $EUID -eq 0 ]]; then
        log_detail "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç root: $*"
        "$@"
    elif command -v sudo >/dev/null 2>&1; then
        log_detail "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ sudo: $*"
        sudo "$@"
    else
        log_error "–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ root, –Ω–æ sudo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        friendly_message "help" "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ—Ç root" "su - # –∑–∞—Ç–µ–º cd $(pwd)"
        exit 1
    fi
}
install_packages() {
    local pkgs="$1"
    [[ -z "$pkgs" ]] && { log_info "–ù–µ—Ç –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"; return 0; }
    log_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤: $pkgs"
    local all_install_pkgs="$pkgs"
    for pkg in $pkgs; do
        [[ -z "$pkg" ]] && continue
        local deps
        deps="$(call_provider_func "$CLIENT" "deps_install" "$pkg")"
        for dep in $deps; do
            if [[ ! " $all_install_pkgs " == *" $dep "* ]]; then
                all_install_pkgs="$all_install_pkgs $dep"
                log_detail "–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: $dep"
            fi
        done
    done
    local pm cmd
    pm="$(get_provider_field "$CLIENT" pkgmgr)"
    cmd="$(get_provider_field "$CLIENT" install)"
    if [[ -z "$pm" || -z "$cmd" ]]; then
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
        return 1
    fi
    friendly_message "tip" "–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤..."
    if run_with_privileges "$pm" $cmd $all_install_pkgs; then
        log_success "–ü–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
        return 0
    else
        log_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞–∫–µ—Ç–æ–≤"
        friendly_message "help" "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:" "‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ ‚Ä¢ –ò–º–µ–Ω–∞ –ø–∞–∫–µ—Ç–æ–≤ ‚Ä¢ –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        return 1
    fi
}
remove_packages() {
    local pkgs="$1"
    [[ -z "$pkgs" ]] && { log_info "–ù–µ—Ç –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"; return 0; }
    log_step "–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤: $pkgs"
    local all_remove_pkgs="$pkgs"
    for pkg in $pkgs; do
        [[ -z "$pkg" ]] && continue
        local deps
        deps="$(call_provider_func "$CLIENT" "deps_remove" "$pkg")"
        for dep in $deps; do
            if [[ ! " $all_remove_pkgs " == *" $dep "* ]]; then
                all_remove_pkgs="$all_remove_pkgs $dep"
                log_detail "–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è: $dep"
            fi
        done
    done
    local important_pkgs=("sudo" "bash" "coreutils" "systemd")
    for important in "${important_pkgs[@]}"; do
        if [[ " $all_remove_pkgs " == *" $important "* ]]; then
            log_warn "–í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–∞–∂–Ω–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞: $important"
            friendly_message "tip" "–£–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ—Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã!"
            read -rp "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ? (y/N): " -n 1
            echo
            [[ ! $REPLY =~ ^[Yy]$ ]] && { log_info "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"; return 0; }
            break
        fi
    done
    local pm cmd
    pm="$(get_provider_field "$CLIENT" pkgmgr)"
    cmd="$(get_provider_field "$CLIENT" remove)"
    if run_with_privileges "$pm" $cmd $all_remove_pkgs; then
        log_success "–ü–∞–∫–µ—Ç—ã —É–¥–∞–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
        return 0
    else
        log_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–∫–µ—Ç–æ–≤"
        return 1
    fi
}
# =============================================================================
# –ö–û–ú–ê–ù–î–´
# =============================================================================
# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: detect_client, choose_editor, find_recipe_file, validate_recipe_file,
#      load_recipes, cmd_list, cmd_edit, cmd_cook, cmd_devinfo, main ‚Äî –æ—Å—Ç–∞—é—Ç—Å—è –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
# =============================================================================
# –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
# =============================================================================
detect_client() {
    log_step "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞ Linux..."
    if [[ -f /etc/os-release ]]; then
        source /etc/os-release
        CLIENT="${ID,,}"
        if [[ -n "${DISTRO_MAPPING[$CLIENT]}" ]]; then
            local distro_name="${PROVIDER_CONFIGS[${DISTRO_MAPPING[$CLIENT]}:name]}"
            log_success "–û–ø—Ä–µ–¥–µ–ª–µ–Ω: $PRETTY_NAME"
            log_detail "–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: $CLIENT, –ü–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä: $distro_name"
        else
            log_warn "–î–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤ '$CLIENT' –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –Ω–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
            friendly_message "tip" "–í—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —ç—Ç–æ–≥–æ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞"
        fi
    else
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤"
        exit 1
    fi
}
choose_editor() {
    log_debug "–ü–æ–¥–±–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞..."
    local editors=("nano" "mcedit" "vim" "vi")
    for e in "${editors[@]}"; do
        if command -v "$e" >/dev/null 2>&1; then
            EDITOR="$e"
            log_detail "–í—ã–±—Ä–∞–Ω —Ä–µ–¥–∞–∫—Ç–æ—Ä: $EDITOR"
            if [[ "$e" == "nano" ]]; then
                friendly_message "tip" "Nano - –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–¥–∞–∫—Ç–æ—Ä. Ctrl+X –¥–ª—è –≤—ã—Ö–æ–¥–∞, Ctrl+O –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
            elif [[ "$e" == "mcedit" ]]; then
                friendly_message "tip" "MCEdit - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä. F2 - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, F10 - –≤—ã–π—Ç–∏"
            fi
            return
        fi
    done
    EDITOR="${VISUAL:-${EDITOR:-vi}}"
    log_warn "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: $EDITOR"
}
find_recipe_file() {
    log_step "–ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è '$CLIENT'..."
    local pattern="*${CLIENT}*.inf"
    local candidates=()
    for path in "${RECIPE_PATHS[@]}"; do
        [[ -d "$path" ]] || continue
        log_debug "–ü–æ–∏—Å–∫ –≤: $path"
        while IFS= read -rd '' file; do
            candidates+=("$file")
            log_debug "–ù–∞–π–¥–µ–Ω–∞ –∫–Ω–∏–≥–∞: $(basename "$file")"
        done < <(find "$path" -maxdepth 1 -name "$pattern" -type f -print0 2>/dev/null)
    done
    if [[ ${#candidates[@]} -eq 0 ]]; then
        log_warn "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ –¥–ª—è '$CLIENT' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        handle_missing_recipe
        return 1
    elif [[ ${#candidates[@]} -eq 1 ]]; then
        RECIPE_FILE="${candidates[0]}"
        log_success "–ù–∞–π–¥–µ–Ω–∞ –∫–Ω–∏–≥–∞: $(basename "$RECIPE_FILE")"
        return 0
    else
        log_info "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–Ω–∏–≥:"
        select_from_list "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É —Ä–µ—Ü–µ–ø—Ç–æ–≤:" "${candidates[@]}"
        if [[ $SELECTED -ne 255 ]]; then
            RECIPE_FILE="${candidates[$((SELECTED-1))]}"
            log_detail "–í—ã–±—Ä–∞–Ω–∞ –∫–Ω–∏–≥–∞: $(basename "$RECIPE_FILE")"
            return 0
        else
            log_error "–ö–Ω–∏–≥–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
            return 1
        fi
    fi
}
handle_missing_recipe() {
    log_step "–ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∫–Ω–∏–≥ —Ä–µ—Ü–µ–ø—Ç–æ–≤..."
    local all_books=()
    for path in "${RECIPE_PATHS[@]}"; do
        [[ -d "$path" ]] || continue
        while IFS= read -rd '' file; do
            all_books+=("$file")
        done < <(find "$path" -maxdepth 1 -name "*.inf" -type f -print0 2>/dev/null)
    done
    if [[ ${#all_books[@]} -gt 0 ]]; then
        log_info "–ù–∞–π–¥–µ–Ω—ã –¥—Ä—É–≥–∏–µ –∫–Ω–∏–≥–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤:"
        select_from_list "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –æ—Å–Ω–æ–≤—É:" "${all_books[@]}"
        if [[ $SELECTED -ne 255 ]]; then
            local selected_book="${all_books[$((SELECTED-1))]}"
            friendly_message "help" "–û—Ç–∫—Ä—ã–≤–∞—é –∫–Ω–∏–≥—É –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏" "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ '${CLIENT}.inf'"
            edit_recipe "$selected_book"
            exit 0
        fi
    fi
    friendly_message "help" "–°–æ–∑–¥–∞—é –Ω–æ–≤—É—é –∫–Ω–∏–≥—É —Ä–µ—Ü–µ–ø—Ç–æ–≤" "–í—ã –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –µ—ë –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
    create_new_recipe
    exit 0
}
select_from_list() {
    local header="$1"; shift
    local items=("$@")
    [[ -n "$header" ]] && log_info "$header"
    for i in "${!items[@]}"; do
        echo "  $((i+1)). $(basename "${items[$i]}")"
    done
    echo -e "${CYAN}  0. –û—Ç–º–µ–Ω–∞${NC}"
    read -rp "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç [0-${#items[@]}]: " choice
    if [[ "$choice" =~ ^[0-9]+$ ]] && (( choice >= 1 && choice <= ${#items[@]} )); then
        SELECTED="$choice"
    elif [[ "$choice" == "0" ]]; then
        SELECTED=255
        log_info "–í—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω"
    else
        log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä: '$choice'"
        SELECTED=255
    fi
}
create_new_recipe() {
    local recipes_dir="${RECIPE_PATHS[0]}"
    log_step "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤..."
    mkdir -p "$recipes_dir"
    local new_file="$recipes_dir/${CLIENT}.inf"
    cat > "$new_file" <<EOF
# –ö–Ω–∏–≥–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–ª—è: ${CLIENT^^}
# –°–æ–∑–¥–∞–Ω–æ: $(date "+%Y-%m-%d %H:%M:%S")
# –ê–≤—Ç–æ—Ä: $(whoami)
[mc]
name = mc
ingredients = mc
cleanups =
spices = –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:
[sudo]
name = –ù–∞—Å—Ç—Ä–æ–π–∫–∞ sudo
ingredients = sudo
cleanups =
spices = –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É sudo
         sudo usermod -a -G sudo username
EOF
    if [[ -f "$new_file" ]]; then
        log_success "–°–æ–∑–¥–∞–Ω–∞ –∫–Ω–∏–≥–∞: $new_file"
        friendly_message "tip" "–ö–Ω–∏–≥–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ—ë –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã."
        edit_recipe "$new_file"
    else
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª: $new_file"
        exit 1
    fi
}
edit_recipe() {
    choose_editor
    if ! command -v "$EDITOR" >/dev/null 2>&1; then
        log_error "–†–µ–¥–∞–∫—Ç–æ—Ä '$EDITOR' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        friendly_message "help" "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é EDITOR" "apt-get install nano"
        return 1
    fi
    log_step "–û—Ç–∫—Ä—ã–≤–∞—é –∫–Ω–∏–≥—É —Ä–µ—Ü–µ–ø—Ç–æ–≤..."
    log_detail "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: $EDITOR $1"
    friendly_message "tip" "–ü–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –∏ –∑–∞–∫—Ä–æ–π—Ç–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä"
    "$EDITOR" "$1"
}
validate_recipe_file() {
    log_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∫–Ω–∏–≥–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤..."
    if [[ ! -f "$RECIPE_FILE" ]]; then
        log_error "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $RECIPE_FILE"
        return 1
    fi
    local line_num=0 in_section=0 section_name=""
    local has_name=0 has_ingredients=0 has_cleanups=0 has_spices=0
    local validation_errors=()
    while IFS= read -r line || [[ -n "$line" ]]; do
        ((line_num++))
        [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
        if [[ "$line" =~ ^\[([a-zA-Z0-9_-]+)\]$ ]]; then
            if ((in_section)) && (( !has_name )); then
                validation_errors+=("–°—Ç—Ä–æ–∫–∞ $line_num: –°–µ–∫—Ü–∏—è '$section_name' –±–µ–∑ –ø–æ–ª—è 'name'")
            fi
            section_name="${BASH_REMATCH[1]}"
            in_section=1
            has_name=0; has_ingredients=0; has_cleanups=0; has_spices=0
            log_debug "–ù–∞—á–∞–ª–æ —Å–µ–∫—Ü–∏–∏: $section_name"
            continue
        fi
        if (( !in_section )); then
            validation_errors+=("–°—Ç—Ä–æ–∫–∞ $line_num: –î–∞–Ω–Ω—ã–µ –≤–Ω–µ —Å–µ–∫—Ü–∏–∏: '$line'")
            continue
        fi
        if [[ "$line" =~ ^name[[:space:]]*=[[:space:]]*(.*) ]]; then
            has_name=1
        elif [[ "$line" =~ ^ingredients[[:space:]]*=[[:space:]]*(.*) ]]; then
            has_ingredients=1
        elif [[ "$line" =~ ^cleanups[[:space:]]*=[[:space:]]*(.*) ]]; then
            has_cleanups=1
        elif [[ "$line" =~ ^spices[[:space:]]*=[[:space:]]*(.*) ]]; then
            has_spices=1
        elif [[ "$line" =~ ^[[:space:]]+ ]] && ((has_spices)); then
            continue
        else
            validation_errors+=("–°—Ç—Ä–æ–∫–∞ $line_num: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –≤ —Å–µ–∫—Ü–∏–∏ '$section_name': '$line'")
        fi
    done < "$RECIPE_FILE"
    if ((in_section)) && (( !has_name )); then
        validation_errors+=("–ö–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞: –°–µ–∫—Ü–∏—è '$section_name' –±–µ–∑ –ø–æ–ª—è 'name'")
    fi
    if [[ ${#validation_errors[@]} -eq 0 ]]; then
        log_success "–ö–Ω–∏–≥–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"
        log_detail "–§–∞–π–ª: $(basename "$RECIPE_FILE")"
        return 0
    else
        log_error "–ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –∫–Ω–∏–≥–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤:"
        for error in "${validation_errors[@]}"; do
            echo "  ‚Ä¢ $error"
        done
        friendly_message "help" "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ" "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: $0 edit"
        return 1
    fi
}
load_recipes() {
    log_debug "–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ –ø–∞–º—è—Ç—å..."
    local current_section="" spices_lines=() in_spices=0
    RECIPE_NAME=() RECIPE_INGREDIENTS=() RECIPE_CLEANUPS=() RECIPE_SPICES=()
    while IFS= read -r line || [[ -n "$line" ]]; do
        [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
        if [[ "$line" =~ ^\[([a-zA-Z0-9_-]+)\]$ ]]; then
            [[ -n "$current_section" ]] && RECIPE_SPICES["$current_section"]=$(IFS=$'\n'; echo "${spices_lines[*]}")
            current_section="${BASH_REMATCH[1]}"
            spices_lines=()
            in_spices=0
            log_debug "–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Ä–µ—Ü–µ–ø—Ç: $current_section"
            continue
        fi
        if [[ "$line" =~ ^name[[:space:]]*=[[:space:]]*(.*) ]]; then
            RECIPE_NAME["$current_section"]="${BASH_REMATCH[1]}"
        elif [[ "$line" =~ ^ingredients[[:space:]]*=[[:space:]]*(.*) ]]; then
            RECIPE_INGREDIENTS["$current_section"]="${BASH_REMATCH[1]}"
        elif [[ "$line" =~ ^cleanups[[:space:]]*=[[:space:]]*(.*) ]]; then
            RECIPE_CLEANUPS["$current_section"]="${BASH_REMATCH[1]}"
        elif [[ "$line" =~ ^spices[[:space:]]*=[[:space:]]*(.*) ]]; then
            spices_lines=("${BASH_REMATCH[1]}")
            in_spices=1
        elif ((in_spices)) && [[ "$line" =~ ^[[:space:]]+ ]]; then
            spices_lines+=("$line")
        fi
    done < "$RECIPE_FILE"
    [[ -n "$current_section" ]] && RECIPE_SPICES["$current_section"]=$(IFS=$'\n'; echo "${spices_lines[*]}")
    log_success "–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: ${#RECIPE_NAME[@]}"
}
find_matching_recipes() {
    local query="$1"
    FOUND_RECIPES=()
    log_debug "–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '$query'"
    for key in "${!RECIPE_NAME[@]}"; do
        if [[ "${RECIPE_NAME[$key],,}" == *"${query,,}"* ]] || [[ "${key,,}" == *"${query,,}"* ]]; then
            FOUND_RECIPES["$key"]="$key"
            log_debug "–ù–∞–π–¥–µ–Ω —Ä–µ—Ü–µ–ø—Ç: $key -> ${RECIPE_NAME[$key]}"
        fi
    done
}
cmd_list() {
    local search="$1"
    if ! find_recipe_file; then return 1; fi
    if ! validate_recipe_file; then
        friendly_message "help" "–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ –∫–Ω–∏–≥–µ" "$0 edit"
        return 1
    fi
    load_recipes
    find_matching_recipes "$search"
    if [[ ${#FOUND_RECIPES[@]} -gt 0 ]]; then
        log_success "–ù–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: ${#FOUND_RECIPES[@]}"
        echo
        for r in "${!FOUND_RECIPES[@]}"; do
            echo -e "  ${GREEN}‚Ä¢${NC} ${RECIPE_NAME[$r]} ${CYAN}[$r]${NC}"
            [[ -n "${RECIPE_INGREDIENTS[$r]}" ]] && echo "      üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞: ${RECIPE_INGREDIENTS[$r]}"
            [[ -n "${RECIPE_CLEANUPS[$r]}" ]] && echo "      üßπ –û—á–∏—Å—Ç–∫–∞: ${RECIPE_CLEANUPS[$r]}"
            echo
        done
    else
        log_info "–†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        friendly_message "tip" "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç"
    fi
}
cmd_edit() {
    if find_recipe_file; then
        edit_recipe "$RECIPE_FILE"
    else
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        return 1
    fi
}
cmd_validate() {
    if find_recipe_file; then
        validate_recipe_file
    else
        return 1
    fi
}
cmd_cook() {
    local query="$1"
    [[ -z "$query" ]] && {
        log_error "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞"
        friendly_message "help" "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã" "$0 list"
        exit 1
    }
    log_step "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é: '$query'"
    if ! find_recipe_file; then exit 1; fi
    if ! validate_recipe_file; then
        log_error "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–Ω–∏–≥–æ–π, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π –æ—à–∏–±–∫–∏"
        exit 1
    fi
    load_recipes
    find_matching_recipes "$query"
    if [[ ${#FOUND_RECIPES[@]} -eq 0 ]]; then
        log_error "–†–µ—Ü–µ–ø—Ç '$query' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        friendly_message "help" "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'list' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤" "$0 list"
        exit 1
    elif [[ ${#FOUND_RECIPES[@]} -gt 1 ]]; then
        log_info "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤:"
        local i=1 keys=()
        for k in "${!FOUND_RECIPES[@]}"; do
            echo "  $i. ${RECIPE_NAME[$k]} ${CYAN}[$k]${NC}"
            keys+=("$k")
            ((i++))
        done
        read -rp "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç [1-${#keys[@]}]: " choice
        if [[ "$choice" =~ ^[0-9]+$ ]] && (( choice >= 1 && choice <= ${#keys[@]} )); then
            query="${keys[$((choice-1))]}"
            log_detail "–í—ã–±—Ä–∞–Ω —Ä–µ—Ü–µ–ø—Ç: ${RECIPE_NAME[$query]}"
        else
            log_info "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
            exit 0
        fi
    else
        query="${!FOUND_RECIPES[@]}"
        log_detail "–í—ã–±—Ä–∞–Ω —Ä–µ—Ü–µ–ø—Ç: ${RECIPE_NAME[$query]}"
    fi
    local name="${RECIPE_NAME[$query]}"
    local ing="${RECIPE_INGREDIENTS[$query]}"
    local clean="${RECIPE_CLEANUPS[$query]}"
    local spice="${RECIPE_SPICES[$query]}"
    log_info "–†–µ—Ü–µ–ø—Ç: '$name'"
    if ! analyze_dependencies "$ing" "$clean"; then
        read -rp "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ? (y/N): " -n 1
        echo
        [[ ! $REPLY =~ ^[Yy]$ ]] && { log_info "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"; exit 0; }
    fi
    if [[ -n "$spice" ]]; then
        log_info "–°–ø–µ—Ü–∏–∏:"
        echo "$spice" | while IFS= read -r l; do echo "  $l"; done
    fi
    read -rp "–ù–∞—á–∞—Ç—å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ? (y = –≥–æ—Ç–æ–≤–∏—Ç—å, e = —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, n = –æ—Ç–º–µ–Ω–∞): " -n 1
    echo
    case "$REPLY" in
        [eE]) edit_recipe "$RECIPE_FILE"; exit 0;;
        [nN]) log_info "–û—Ç–º–µ–Ω–µ–Ω–æ."; exit 0;;
    esac
    if [[ -n "$clean" ]]; then remove_packages "$clean"; fi
    if [[ -n "$ing" ]]; then install_packages "$ing"; fi
    log_success "–†–µ—Ü–µ–ø—Ç '$name' –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω!"
    if [[ -n "$spice" ]]; then
        log_info "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:"
        echo "$spice" | while IFS= read -r l; do echo "  $l"; done
    fi
    log_info "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üçΩÔ∏è"
}
cmd_devinfo() {
    echo; friendly_message "developer" "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"; echo
    detect_client
    echo -e "${CYAN}–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–µ:${NC}"
    echo "  ID: $CLIENT"
    echo "  –¢–∏–ø –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${DISTRO_MAPPING[$CLIENT]:-–ù–ï –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù}"
    echo "  –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: $([[ -n "${DISTRO_MAPPING[$CLIENT]}" ]] && echo "–î–ê" || echo "–ù–ï–¢")"
    if [[ -n "${DISTRO_MAPPING[$CLIENT]}" ]]; then
        echo; echo -e "${CYAN}–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:${NC}"
        local provider_type="${DISTRO_MAPPING[$CLIENT]}"
        for key in "${!PROVIDER_CONFIGS[@]}"; do
            if [[ "$key" == "$provider_type:"* ]]; then
                local field="${key#$provider_type:}"
                echo "  $field: ${PROVIDER_CONFIGS[$key]}"
            fi
        done
        echo; echo -e "${CYAN}–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π:${NC}"
        local funcs=("check_install" "check_remove" "deps_install" "deps_remove")
        for func in "${funcs[@]}"; do
            local func_name="provider_${provider_type}_${func}"
            if declare -f "$func_name" >/dev/null; then
                echo "  ‚úÖ $func_name"
            else
                echo "  ‚ùå $func_name"
            fi
        done
    else
        echo; show_distro_help
    fi
    echo; echo -e "${CYAN}–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤—ã:${NC}"
    for distro in "${!DISTRO_MAPPING[@]}"; do
        if [[ "$distro" == "$CLIENT" ]]; then
            echo "  üü¢ $distro ‚Üí ${DISTRO_MAPPING[$distro]}"
        else
            echo "  üîµ $distro ‚Üí ${DISTRO_MAPPING[$distro]}"
        fi
    done
}
main() {
    init_providers
    register_providers
    friendly_message "welcome"
    detect_client
    if ! detect_provider; then exit 1; fi
    choose_editor
    local cmd="${1:-help}"
    case "$cmd" in
        list)     cmd_list "$2" ;;
        cook)     cmd_cook "$2" ;;
        edit)     cmd_edit ;;
        validate) cmd_validate ;;
        devinfo)  cmd_devinfo ;;
        help)     show_help ;;
        *)        log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $cmd"; show_help; exit 1 ;;
    esac
}
show_help() {
    cat <<EOF
${PROGRAM_NAME} v${VERSION} ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ (.inf)
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <–∫–æ–º–∞–Ω–¥–∞> [–∞—Ä–≥—É–º–µ–Ω—Ç]
–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  list [–ø–æ–∏—Å–∫]   ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã
  cook <—Ä–µ—Ü–µ–ø—Ç>  ‚Äî –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç
  edit           ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–∏–≥—É
  validate       ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–Ω–∏–≥—É
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:
  devinfo        ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
  help           ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
–ü—Ä–∏–º–µ—Ä—ã:
  $0 list                    # –í—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã
  $0 cook steam             # –ü—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç
  $0 devinfo                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'devinfo'!
EOF
}
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
